generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 BigInt     @id @default(autoincrement())
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             BigInt     @map("user_id")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           BigInt      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       BigInt      @map("user_id")

  @@map("sessions")
}

model User {
  id            BigInt       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  work          Work[]
  education     Education[]
  jobRequest    JobRequest[]

  @@map(name: "users")
}

model Profile {
  id     BigInt     @default(autoincrement()) @id
  bio    String?
  userId BigInt     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Work {
  id String @id @default(cuid())
  employer String
  title String
  startMonth String
  startYear String
  currentJob Boolean
  endMonth String
  endYear String
  country String
  city String
  state String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId BigInt @map("user_id")
}

model Education {
  id String @id @default(cuid())
  school String
  degree String
  degreeStatus String
  major String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId BigInt @map("user_id")
}

model JobRequest {
  id String @id @default(cuid())
  name String
  dob   String
  skills String[]
  degree Boolean
  locations String[]
  languages String[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId BigInt @map("user_id")
}

model Job {
  id String @id @default(cuid())
  title String
  company String
  ratings  String
  reviewsCount String
  description String
  url String
}
